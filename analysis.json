{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A Polymer element to parse, validate, manipulate, and display dates using Moment.js.\n\nExample:\n\n    <moment-js\n      format=\"YYYY-MM-DD HH:mm:ss\"></moment-js>\n\nExample:\n\n    <moment-js\n      date=\"2016-01-10 14:30\"\n      date-format=\"YYYY-MM-DD HH:mm\"\n      format=\"LLLL\"></moment-js>\n\nExample:\n\n    <moment-js\n      date=\"2016-01-10 14:30\"\n      date-format=\"YYYY-MM-DD HH:mm\"\n      format=\"LLLL\"\n      formatted-date=\"{{myDate}}\"\n      hide></moment-js>\n\nExample:\n\n    <moment-js\n      date=\"19:33\"\n      date-format=\"HH:mm\"\n      start-of=\"hour\"></moment-js>\n\nExample:\n\n    <moment-js\n      date=\"23:30\"\n      date-format=\"HH:mm\"\n      from-now></moment-js>\n\nExample:\n\n    <moment-js\n      date=\"2016-01-10 14:30\"\n      calendar-time></moment-js>",
      "summary": "",
      "path": "moment-js.html",
      "properties": [
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "Locale settings.",
          "privacy": "public",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_localeChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "date",
          "type": "string | null | undefined",
          "description": "Date parameter",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_dateChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "dateFormat",
          "type": "string | null | undefined",
          "description": "Format for parsing the date parameter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateFormattedDateMoment\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "Format for setting the formattedDate.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "formattedDate",
          "type": "string | null | undefined",
          "description": "Output formatted date.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 8
            },
            "end": {
              "line": 95,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "formattedDateMoment",
          "type": "string | null | undefined",
          "description": "Moment object of formatted date.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "utc",
          "type": "boolean | null | undefined",
          "description": "Enable UTC Mode.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 113,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateFormattedDateMoment\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hide",
          "type": "boolean | null | undefined",
          "description": "Hide showing the output.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 121,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "isValid",
          "type": "boolean | null | undefined",
          "description": "Set True if date is valid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "startOf",
          "type": "string | null | undefined",
          "description": "Mutates the original moment by setting it to the start of a unit of time.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "endOf",
          "type": "string | null | undefined",
          "description": "Mutates the original moment by setting it to the end of a unit of time.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "relativeTime",
          "type": "string | null | undefined",
          "description": "Relative time output. e.g. a day ago, in 4 years.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 8
            },
            "end": {
              "line": 148,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "fromNow",
          "type": "boolean | null | undefined",
          "description": "Calculate relativeTime from now.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "calendarTime",
          "type": "boolean | null | undefined",
          "description": "Calendar time output. e.g. Last Monday at 2:30 AM, Today at 2:30 AM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 158,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "toNow",
          "type": "boolean | null | undefined",
          "description": "Calculate relativeTime to now.\nThis is similar to fromNow, but gives the opposite interval: fromNow() = - toNow().",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "output",
          "type": "string | null | undefined",
          "description": "Output result to display.\nIt could be date time or relative time.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 8
            },
            "end": {
              "line": 174,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "isMomentReady",
          "type": "boolean | null | undefined",
          "description": "Indicate moment is loaded and ready to use.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 8
            },
            "end": {
              "line": 183,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_loadMomentJs",
          "description": "Loads momentjs library from local.",
          "privacy": "private",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_waitToLoadMomentJs",
          "description": "Wait till loading momentjs complete and then fire the event `moment-is-ready`.",
          "privacy": "private",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_isValidLocale",
          "description": "Checks if the given locale is valid. A valid locale contains only letters,\nhas a length of 2 (en, de, fr, etc...) or between 5 and 8 with a dash\n(en-ca, de-ch, fr-ca, gom-latn, x-pseudo, etc...).",
          "privacy": "private",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_localeChanged",
          "description": "Updates all `moment-js` instances when the locale of one changed. The\nvalue of `locale` must pass the test `_isValidLocale` else the setting\nstay unchanged.",
          "privacy": "private",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "language"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_syncMomentsLanguage",
          "description": "Synchronizes all moment-js language with the global momentjs locale\nsetting.",
          "privacy": "private",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_localizeGlobalMoment",
          "description": "Asks to `momentjs` to use the defined locales to display the dates. All\ninstances use the same language (defined by MomentJs.language). If the\nlocales file is not loaded, the first element having changed will load it\nand the others wait until the end of the import. Then the global of\n`momentjs` locale is changed and all instances refreshes their display.",
          "privacy": "private",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 151,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "_dateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newVal"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateFormattedDateMoment",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 6
            },
            "end": {
              "line": 222,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateFormattedDate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateRelativeTime",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateIsValid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_startOfChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_endOfChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 6
            },
            "end": {
              "line": 269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_momentIsReady",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 12
        },
        "end": {
          "line": 299,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "locale",
          "description": "Locale settings.",
          "sourceRange": {
            "file": "moment-import-behavior.html",
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "MomentJs.MomentImportBehavior"
        },
        {
          "name": "date",
          "description": "Date parameter",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "date-format",
          "description": "Format for parsing the date parameter.",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "format",
          "description": "Format for setting the formattedDate.",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 22
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "formatted-date",
          "description": "Output formatted date.",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 8
            },
            "end": {
              "line": 95,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "formatted-date-moment",
          "description": "Moment object of formatted date.",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "utc",
          "description": "Enable UTC Mode.",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 113,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hide",
          "description": "Hide showing the output.",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 121,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-valid",
          "description": "Set True if date is valid.",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "start-of",
          "description": "Mutates the original moment by setting it to the start of a unit of time.",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "end-of",
          "description": "Mutates the original moment by setting it to the end of a unit of time.",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "relative-time",
          "description": "Relative time output. e.g. a day ago, in 4 years.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 8
            },
            "end": {
              "line": 148,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "from-now",
          "description": "Calculate relativeTime from now.",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 24
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "calendar-time",
          "description": "Calendar time output. e.g. Last Monday at 2:30 AM, Today at 2:30 AM.",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 158,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "to-now",
          "description": "Calculate relativeTime to now.\nThis is similar to fromNow, but gives the opposite interval: fromNow() = - toNow().",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 22
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "output",
          "description": "Output result to display.\nIt could be date time or relative time.",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 8
            },
            "end": {
              "line": 174,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-moment-ready",
          "description": "Indicate moment is loaded and ready to use.",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 8
            },
            "end": {
              "line": 183,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "formatted-date-changed",
          "description": "Fired when the `formattedDate` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "formatted-date-moment-changed",
          "description": "Fired when the `formattedDateMoment` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "relative-time-changed",
          "description": "Fired when the `relativeTime` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "output-changed",
          "description": "Fired when the `output` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "is-moment-ready-changed",
          "description": "Fired when the `isMomentReady` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "moment-js"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "",
          "summary": "",
          "path": "moment-import-behavior.html",
          "properties": [
            {
              "name": "locale",
              "type": "string | null | undefined",
              "description": "Locale settings.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 20,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_localeChanged\"",
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_loadMomentJs",
              "description": "Loads momentjs library from local.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_waitToLoadMomentJs",
              "description": "Wait till loading momentjs complete and then fire the event `moment-is-ready`.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_isValidLocale",
              "description": "Checks if the given locale is valid. A valid locale contains only letters,\nhas a length of 2 (en, de, fr, etc...) or between 5 and 8 with a dash\n(en-ca, de-ch, fr-ca, gom-latn, x-pseudo, etc...).",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 4
                },
                "end": {
                  "line": 80,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "locale"
                }
              ]
            },
            {
              "name": "_localeChanged",
              "description": "Updates all `moment-js` instances when the locale of one changed. The\nvalue of `locale` must pass the test `_isValidLocale` else the setting\nstay unchanged.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 4
                },
                "end": {
                  "line": 97,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "language"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_syncMomentsLanguage",
              "description": "Synchronizes all moment-js language with the global momentjs locale\nsetting.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 105,
                  "column": 4
                },
                "end": {
                  "line": 111,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_localizeGlobalMoment",
              "description": "Asks to `momentjs` to use the defined locales to display the dates. All\ninstances use the same language (defined by MomentJs.language). If the\nlocales file is not loaded, the first element having changed will load it\nand the others wait until the end of the import. Then the global of\n`momentjs` locale is changed and all instances refreshes their display.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 4
                },
                "end": {
                  "line": 151,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 152,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "MomentJs.MomentImportBehavior",
          "attributes": [
            {
              "name": "locale",
              "description": "Locale settings.",
              "sourceRange": {
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 20,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}
